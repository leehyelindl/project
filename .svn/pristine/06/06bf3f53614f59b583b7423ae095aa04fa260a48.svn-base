package kr.or.ddit.controller.head.orderdeal;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.head.ICustomerService;
import kr.or.ddit.vo.head.HeadPaginationInfoVO;
import kr.or.ddit.vo.head.VendorVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/head")
public class CustomerListController {

	@Inject
	private ICustomerService service;
	
	@RequestMapping(value = "/customerList.do", method=RequestMethod.GET)
	public String customerList(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false) String searchVendor,
			@RequestParam(required = false) String  searchCategory,
			Model model) {
		log.info("customerList() GET -> 시작");
		
		HeadPaginationInfoVO<VendorVO> pagingVO = new HeadPaginationInfoVO<VendorVO>();
		
		if(StringUtils.isNotBlank(searchVendor)) {
			pagingVO.setSearchVendor(searchVendor);
		}
		
		if(StringUtils.isNotBlank(searchCategory)) {
			pagingVO.setSearchVendor(searchCategory);
		}
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = service.selectTotalVendorCount(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		List<VendorVO> dataList = service.selectTotalVendorList(pagingVO);
		pagingVO.setDataList(dataList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "head/orderDeal/customerList";
	}
	
	@ResponseBody
	@RequestMapping(value = "/vendorList.do")
	public ResponseEntity<List<VendorVO>> vendorList(
			@RequestBody VendorVO vendorVO,
			Model model){
		
//		List<VendorVO> selectList = service.selectCategoryList(vendorVO);
//		
//		if(selectList.size() == 1) {
//			for (VendorVO vendorVO2 : selectList) {
//				vendorVO2.setRnum(1);
//			}
//		}
		
		List<VendorVO> selectNotTransactionList = service.selectCategoryList(vendorVO);
		
		return new ResponseEntity<List<VendorVO>>(selectNotTransactionList, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/customerListRegister.do", method = RequestMethod.GET)
	public String customerListRegister(Model model) {
		log.info("customerListRegister() GET -> 시작");
		return "head/orderDeal/customerListRegister";
	}
	
	@ResponseBody
	@RequestMapping(value = "/vendorNameSelect.do")
	public ResponseEntity<VendorVO> vendorNameSelect(@RequestBody VendorVO vendorVO){
		
		VendorVO vendorInfoList = service.selectVendorName(vendorVO);
		return new ResponseEntity<VendorVO>(vendorInfoList, HttpStatus.OK);
	}
}