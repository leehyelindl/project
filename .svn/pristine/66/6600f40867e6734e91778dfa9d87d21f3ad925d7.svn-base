<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 사용자 정의 접근 거부 처리자 빈 -->
	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"/>

	<!-- 1. 로그인 성공 처리자 빈 -->
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"/>
	
	<!-- 로그인 정보 JDBC 처리 --> 
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"/>
	
	<!-- JDBC를 이용한 인증/인가 처리: 비밀번호 암호화 처리기 사용 안함 -->
	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"/>
	
	
	<!-- 5. 암호화를 이용한 비밀번호 처리 -->
<!-- 	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> -->
	
	<security:http>
		<!-- 2. 폼 기반 인증 기능을 사용한다. -->
		<security:form-login login-page="/elly/login.do" authentication-success-handler-ref="customLoginSuccess"/>
		
		<security:access-denied-handler ref="customAccessDenied"/>
		
<!-- 		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/> -->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID"/>
	</security:http>
	
	<security:authentication-manager>
		<!-- 3. 지정한 아이디와 패스워드로 로그인 가능하도록 설정 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">

			<!-- 5. 암호화를 이용한 비밀번호 처리 -->
			<security:password-encoder ref="customPasswordEncoder"/>
			
			<!-- 5. 암호화를 이용한 비밀번호 처리 -->
<!-- 			<security:password-encoder ref="bcryptPasswordEncoder"/> -->
			
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
