<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec" %>
<sec:authorize access="isAuthenticated()">
	<sec:authentication property="principal.member" var="member"/>
</sec:authorize>

<div>
<!-- ======= menubar Section ======= -->
<div id="" class="d-flex align-items-center h-75 d-inline-block align-middle">
	<div class="container position-relative text-center text-lg-center aos-init aos-animate" data-aos="zoom-in" data-aos-delay="100">
		<div class="row" style="height: 600px">
			<div class="col" style="background-color: white;">
			</div>
			<div class="col">
			</div>
		</div>
	</div>
</div>
<!-- menubar Hero -->

<main id="main">
	<div class="map_wrap">
	    <div id="map" style="width:100%;height:100%;position:relative;overflow:hidden;">
	    </div>
	
	    <div id="menu_wrap" class="bg_white" style="color: black;">
	        <div class="option">
	            <div>
	            	<form>
                		키워드 : <input type="text" value="" id="keyword" size="15"> 
	                    <input type="button" id="searchBtn" value="검색하기"/> 
	                    <sec:csrfInput/>
	                </form>
	            </div>
	        </div>
	        <hr>
	        <ul id="placesList"></ul>
	        <div id="pagination"></div>
	    </div>
	</div>
</main>
</div>
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=806a49ec63336f4fd1e46074f5163d44&libraries=services"></script>
<script>
//마커를 담을 배열입니다
var markers = [];

var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapOption = {
        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
        level: 3 // 지도의 확대 레벨
    };  

// 지도를 생성합니다    
var map = new kakao.maps.Map(mapContainer, mapOption); 

// 장소 검색 객체를 생성합니다
var ps = new kakao.maps.services.Places();  

// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
var infowindow = new kakao.maps.InfoWindow({zIndex:1});

//마커를 표시할 위치와 title 객체 배열입니다 
$(function(){
	
	var searchBtn = $("#searchBtn")
	
	searchBtn.on("click", function(){
		var keyword = $("#keyword").val();
		var data = {
			keyword : keyword
		};
		
		$.ajax({
			type : "post",
			url : "/elly/store/list.do",
			data : JSON.stringify(data),
			beforeSend: function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}")
			},
			contentType : "application/json; charset=utf-8",
			success : function(res){
				var listEl = document.getElementById('placesList'), 
			    menuEl = document.getElementById('menu_wrap'),
			    fragment = document.createDocumentFragment(), 
			    bounds = new kakao.maps.LatLngBounds(), 
			    listStr = '';
				
			    // 검색 결과 목록에 추가된 항목들을 제거합니다
			    removeAllChildNods(listEl);

			    // 지도에 표시되고 있는 마커를 제거합니다
			    removeMarker();
			    
			    for ( var i=0; i<res.length; i++ ) {
			    	// 마커를 생성하고 지도에 표시합니다
			    	var placePosition = new kakao.maps.LatLng(res[i].frcsXmap, res[i].frcsYmap)
		            var marker = addMarker(placePosition, i) 
		            var itemEl = getListItem(i, res[i]); // 검색 결과 항목 Element를 생성합니다
			    	
			    	bounds.extend(placePosition);
		            
			    	fragment.appendChild(itemEl);
			    	
			    	(function(marker, title) {
			            kakao.maps.event.addListener(marker, 'click', function() {
			                displayInfowindow(marker, title);
			            	
// 			                $("#resBtn").on("click", function(){
// 			            		alert("버튼이 클릭되었습니다!");
// 			            	})
			            });

			        })(marker, res[i]);
			    }
			    
			 // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
			    listEl.appendChild(fragment);
			    menuEl.scrollTop = 0;

			    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
			    map.setBounds(bounds);
			}
		})
		
	});
	
	// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
	function addMarker(position, idx, title) {
		var imageSrc = "${pageContext.request.contextPath }/resources/assets/img/marker.png"; 
	        imageSize = new kakao.maps.Size(58, 71),  // 마커 이미지의 크기
	        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize),
	            marker = new kakao.maps.Marker({
	            position: position, // 마커의 위치
	            image: markerImage 
	        });

	    marker.setMap(map); // 지도 위에 마커를 표출합니다
	    markers.push(marker);  // 배열에 생성된 마커를 추가합니다

	    return marker;
	}

	// 검색결과 항목을 Element로 반환하는 함수입니다
	function getListItem(index, res) {

	    var el = document.createElement('li'),
	    itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
	                '<div class="info">' +
	                '   <h5>' + res.frcsName + '</h5>';

	    if (res.frcsAdd1) {
	        itemStr += '    <span>' + res.frcsAdd1 + '</span>' +
	                    '   <span class="gray">' +  res.frcsAdd2  + '</span>';
	    } else {
	        itemStr += '    <span>' +  res.frcsName  + '</span>'; 
	    }
	                 
	      itemStr += '  <span class="tel">' + res.frcsTel  + '</span>' +
	                '</div>';           

	    el.innerHTML = itemStr;
	    el.className = 'item';

	    return el;
	}
	
	function removeMarker() {
	    for ( var i = 0; i < markers.length; i++ ) {
	        markers[i].setMap(null);
	    }   
	    markers = [];
	}
	
	 // 검색결과 목록의 자식 Element를 제거하는 함수입니다
	function removeAllChildNods(el) {   
	    while (el.hasChildNodes()) {
	        el.removeChild (el.lastChild);
	    }
	}
	 
	// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
	// 인포윈도우에 장소명을 표시합니다
	function displayInfowindow(marker, title) {
	    var content = '<div style="padding:5px;z-index:1;color:black;">' + title.frcsName + '</div>'
	    + '<div style="color: #f5f5f5; border-bottom: 2px solid; width:146px"></div>'
	    + '<div style="padding-left: 5px; padding-top: 10px; padding-bottom: 10px;">'
	    + '<a href="/elly/store/res.do?frcsId='+ title.frcsId +'">'
	    + '<input type="button" id="resBtn" style="padding:5px; margin-left: 38px; z-index:1; color:black;" value="예약하기" /></a></div>';
	    
	    
	    
	    infowindow.setContent(content);
	    infowindow.open(map, marker);
	}
});

</script>