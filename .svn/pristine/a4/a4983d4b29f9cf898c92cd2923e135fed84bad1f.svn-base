package kr.or.ddit.service.owner.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.mapper.owner.FrcsEmployeeMapper;
import kr.or.ddit.service.owner.IFrcsEmployeeService;
import kr.or.ddit.vo.AttachVO;
import kr.or.ddit.vo.owner.FrcsEmployeeVO;
import kr.or.ddit.vo.owner.FrcsInquiryVO;

@Service
public class FrcsEmployeeServiceImpl implements IFrcsEmployeeService {
	
	@Inject
	private FrcsEmployeeMapper mapper;

	@Override
	public List<FrcsEmployeeVO> frcsEmpList(String frcsId) {
		return mapper.frcsEmpList(frcsId);
	}

	@Override
	public ServiceResult frcsEmpInsert(HttpServletRequest req, FrcsEmployeeVO frcsEmpVO) {
		ServiceResult result = null;
		
//		String uploadPath = req.getServletContext().getRealPath("/resources/img/profile");
//		File file = new File(uploadPath);
//		if(!file.exists()) {
//			file.mkdirs();
//		}
//		
//		String proFileImg = ""; // 회원정보에 추가될 프로필 이미지 경로
//		try {
//			MultipartFile profileImgFile = frcsEmpVO.getImgFile();
//			
//			if(profileImgFile.getOriginalFilename() != null &&
//					!profileImgFile.getOriginalFilename().equals("")) {
//				String fileName = UUID.randomUUID().toString(); // UUID 파일명 생성
//				fileName += "_" + profileImgFile.getOriginalFilename(); // UUID_원본파일명
//				uploadPath += "/" + fileName; // 최종 업로드하기 위한 파일 경로
//				profileImgFile.transferTo(new File(uploadPath)); // 해당 위치 경로에 파일 복사
//				proFileImg = "/resources/img/profile/" + fileName; // 파일 복사가 일어난 파일의 위치로 접근하기 위한 URI설정
//			} 
//			frcsEmpVO.setFrcsEmpProfileimg(proFileImg);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
		int status = mapper.frcsEmpInsert(frcsEmpVO);
		if(status > 0) {
			List<AttachVO> empFileList = frcsEmpVO.getEmpFileList();
			try {
				//  파일 업로드 처리 함수
				// 공통적인 소스가 반복되므로 함수로 모듈화를 진행하여 사용한다.
				// 여러 컨트롤러 메소드에서 사용될 수 있으므로 
				empFileUpload(empFileList, frcsEmpVO.getFrcsEmpCd(), status, req);
			} catch (IOException e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	private void empFileUpload(
			List<AttachVO> empFileList, String frcsEmpCd, int status, 
			HttpServletRequest req) throws IllegalStateException, IOException {
		
		String savePath = "/resources/upload/file/";
		
		int count = 1;	// 넘겨받은 파일의 갯수가 카운팅 될 변수
		// 넘겨받은 파일 데이터가 존재할 때
		if(empFileList != null && empFileList.size() > 0) {
			for(AttachVO attachVO : empFileList) {
				// 파일 업로드 처리 시작
				String saveName = UUID.randomUUID().toString();	//	UUID의 랜덤 파일명 생성
				saveName = saveName + "_" + attachVO.getAttachOrgname().replaceAll(" ", "_"); // 공백일때 _로 전부 바꿔준다.
				
				String saveLocate = req.getServletContext().getRealPath(savePath + frcsEmpCd);
				File file = new File(saveLocate);
				if(!file.exists()) {	// 업로드를 하기 위한 폴더 구조가 존재하지 않을 때
					file.mkdirs();		// 폴더 생성
				}
				
				// /resources/notice/15/UUID_원본파일명
				saveLocate += "/" + saveName;
				attachVO.setFileNo(count++);
				attachVO.setTablePk(frcsEmpCd+"");// 게시글 번호 설정
				attachVO.setAttachSavename(saveLocate); 		// 파일 업로드 경로 설정
				mapper.insertEmpFile(attachVO);	// 게시글 파일 데이터 추가
				
				File saveFile = new File(saveLocate);
				attachVO.getItem().transferTo(saveFile);	// 파일 복사
			}
		}
		
	}

	@Override
	public ServiceResult empDelete(HttpServletRequest req, String frcsEmpCd) {
		ServiceResult result = null;
		
		// 파일데이터 삭제 준비
		FrcsEmployeeVO frcsEmpVO = mapper.selectEmp(frcsEmpCd); // 해당 문의 가져오기
		mapper.deleteEmpFileByEmpCd(frcsEmpCd); // 문의번호에 해당하는 파일 데이터 삭제
		
		int status = mapper.empDelete(frcsEmpCd);
		if(status > 0) {
			List<AttachVO> empFileList = frcsEmpVO.getEmpFileList(); // 파일목록가져오기
			try {
				if(empFileList != null && empFileList.size() > 0) {
					// [0] = D:\99.Class\02.SPRING2\workspace_spring2\.metadata\...\
					// [1] = a2e2ygadd-a2d3da3f-a23fa3fa-fa3afa3f_원본파일명.jpg
					String[] filePath = empFileList.get(0).getAttachSavename().split("/");
					
					String path = filePath[0];
					deleteFolder(req, path);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	private void deleteFolder(HttpServletRequest req, String path) {
		// UUID_원본파일명 전 폴더경로를 folder 파일객체로 잡아준다.
		File folder = new File(path);
		
		try {
			if(folder.exists()) {	//	경로가 존재한다면
				File[] folderList = folder.listFiles(); // 폴더 안에 있는 파일들의 목록을 가져온다.
				
				for(int i = 0; i < folderList.length; i++) {
					if(folderList[i].isFile()) {	// 폴더안의 있는 파일이 파일일때
						folderList[i].delete(); // 폴더 안에 파일을 차례대로 삭제
					}else {
						// 폴더안의 있는 파일이 폴더일때 재귀함수 호출(폴더안으로 들어가서 다시 이행)
						deleteFolder(req, folderList[i].getPath());
					}
				}
				folder.delete();	// 폴더 삭제
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public ServiceResult empUpdate(HttpServletRequest req, FrcsEmployeeVO frcsEmpVO) {
		ServiceResult result = null;
		int status = mapper.empUpdate(frcsEmpVO);
		if(status > 0) {
			List<AttachVO> frcsEmpList = frcsEmpVO.getEmpFileList();
			try {
				
				empFileUpload(frcsEmpList, frcsEmpVO.getFrcsEmpCd(), status, req);
				
				// 기존에 등록되어 있는 파일 목록들 중, 수정하기 위해서 x버튼을 눌러 삭제 처리로 넘겨준 파일 번호들
				Integer[] delEmpNo = frcsEmpVO.getDelEmpNo();
				if(delEmpNo != null) {
					for(int i = 0; i < delEmpNo.length; i++) {
						AttachVO attachVO = mapper.selectEmpFile(delEmpNo[i]);
						mapper.deleteEmpFile(delEmpNo[i]); // 파일번호에 해당하는 파일 삭제
						File file = new File(attachVO.getAttachSavename());
						file.delete(); // 기존 파일 업로드 경로에 파일 삭제
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public AttachVO selectFileInfo(int attachNo) {
		return mapper.selectFileInfo(attachNo);
	}
	
}
